{
  "version": 5,
  "cmakeMinimumRequired": {
    "major": 3,
    "minor": 24,
    "patch": 0
  },
  "include": [
    "CMakePresetsBase.json",
    "CMakePresetsMinGW.json"
  ],
  "configurePresets": [
    {
      "name": "Documentation",
      "inherits": "base",
      "cacheVariables": {
        "OWL_DOC_ONLY": "ON",
        "CMAKE_C_COMPILER": "clang",
        "CMAKE_CXX_COMPILER": "clang++"
      }
    },
    {
      "name": "CodeCoverage_gcc",
      "inherits": "gcc-debug-static",
      "cacheVariables": {
        "OWL_ENABLE_COVERAGE": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Linux"
      }
    },
    {
      "name": "CodeCoverage",
      "inherits": "CodeCoverage_gcc"
    },
    {
      "name": "CodeCoverage_clang",
      "inherits": "clang-debug-static",
      "cacheVariables": {
        "OWL_ENABLE_COVERAGE": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Linux"
      }
    },
    {
      "name": "CodeCoverage_gcc_mingw",
      "inherits": "mingw-gcc-debug-static",
      "cacheVariables": {
        "OWL_ENABLE_COVERAGE": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Windows"
      }
    },
    {
      "name": "CodeCoverage_mingw",
      "inherits": "CodeCoverage_gcc_mingw"
    },
    {
      "name": "CodeCoverage_clang_mingw",
      "inherits": "mingw-clang-debug-static",
      "cacheVariables": {
        "OWL_ENABLE_COVERAGE": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Windows"
      }
    },
    {
      "name": "clang-tidy",
      "inherits": "clang-debug-shared",
      "cacheVariables": {
        "OWL_ENABLE_CLANG_TIDY": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Linux"
      }
    },
    {
      "name": "clang-tidy_mingw",
      "inherits": "mingw-clang-debug-shared",
      "cacheVariables": {
        "OWL_ENABLE_CLANG_TIDY": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Windows"
      }
    },
    {
      "name": "sanitizer-address",
      "inherits": "clang-debug-shared",
      "cacheVariables": {
        "OWL_ENABLE_ADDRESS_SANITIZER": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Linux"
      }
    },
    {
      "name": "sanitizer-thread",
      "inherits": "clang-debug-shared",
      "cacheVariables": {
        "OWL_ENABLE_THREAD_SANITIZER": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Linux"
      }
    },
    {
      "name": "sanitizer-undefined-behavior",
      "inherits": "clang-debug-shared",
      "cacheVariables": {
        "OWL_ENABLE_UNDEFINED_BEHAVIOR_SANITIZER": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Linux"
      }
    },
    {
      "name": "sanitizer-leak",
      "inherits": "clang-debug-shared",
      "cacheVariables": {
        "OWL_ENABLE_LEAK_SANITIZER": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Linux"
      }
    },
    {
      "name": "sanitizer-memory",
      "inherits": "clang-debug-shared",
      "cacheVariables": {
        "OWL_ENABLE_MEMORY_SANITIZER": "ON",
        "OWL_ENABLE_STACKTRACE": "ON"
      },
      "condition": {
        "type": "equals",
        "lhs": "${hostSystemName}",
        "rhs": "Linux"
      }
    }
  ]
}
