

function(owl_target_link_vulkan target_name)
    set(StateSave ${CMAKE_MAP_IMPORTED_CONFIG_DEBUG})
    set(CMAKE_MAP_IMPORTED_CONFIG_DEBUG Release)
    find_package(VulkanHeaders REQUIRED)
    find_package(VulkanLoader REQUIRED)
    get_filename_component(VULKAN_DIR ${VulkanLoader_DIR} DIRECTORY)
    get_filename_component(VULKAN_DIR ${VULKAN_DIR} DIRECTORY)
    message(STATUS "Found Vulkan version ${VulkanLoader_VERSION} @ ${VULKAN_DIR}")
    target_link_libraries(${target_name} PRIVATE Vulkan::Loader)
    find_package(VulkanUtilityLibraries REQUIRED)
    message(STATUS "Found VulkanUtilityLibrary version ${VulkanLoader_VERSION} @ ${VULKAN_DIR}")
    target_link_libraries(${target_name} PRIVATE Vulkan::LayerSettings)
    target_link_libraries(${target_name} PRIVATE Vulkan::UtilityHeaders)
    # Vulkan layers
    if (${PROJECT_PREFIX}_DEFINE_VULKAN_LAYERS)
        if (${PROJECT_PREFIX}_PLATFORM_WINDOWS)
            set(${PROJECT_PREFIX}_VULKAN_LAYER_PATH ${VULKAN_DIR}/bin CACHE PATH "Vulkan layer path")
            set(${PROJECT_PREFIX}_VULKAN_LAYER_BIN_PATH ${VULKAN_DIR}/bin CACHE PATH "Vulkan layer path")
        else ()
            set(${PROJECT_PREFIX}_VULKAN_LAYER_PATH ${VULKAN_DIR}/share/vulkan/explicit_layer.d CACHE PATH "Vulkan layer path")
            set(${PROJECT_PREFIX}_VULKAN_LAYER_BIN_PATH ${VULKAN_DIR}/lib CACHE PATH "Vulkan layer path")
        endif ()
        target_compile_definitions(${target_name} PUBLIC
                $<BUILD_INTERFACE:${PROJECT_PREFIX}_VULKAN_LAYER_PATH="${${PROJECT_PREFIX}_VULKAN_LAYER_PATH}">
                $<BUILD_INTERFACE:${PROJECT_PREFIX}_VULKAN_LAYER_BIN_PATH="${${PROJECT_PREFIX}_VULKAN_LAYER_BIN_PATH}">)
    endif ()
    # Spir-V cross
    if (${PROJECT_PREFIX}_BUILD_SHARED AND WIN32)
        find_package(spirv_cross_c_shared REQUIRED)
        message(STATUS "Found spirv_cross_c_shared version ${spirv_cross_c_shared_VERSION} @ ${spirv_cross_c_shared_DIR}")
        target_link_libraries(${target_name}Private INTERFACE spirv-cross-c-shared)
    else ()
        find_package(spirv_cross_core REQUIRED)
        find_package(spirv_cross_glsl REQUIRED)
        find_package(spirv_cross_hlsl REQUIRED)
        find_package(spirv_cross_msl REQUIRED)
        find_package(spirv_cross_cpp REQUIRED)
        find_package(spirv_cross_reflect REQUIRED)
        find_package(spirv_cross_c REQUIRED)
        message(STATUS "Found spirv_cross_c version ${spirv_cross_c_VERSION} @ ${spirv_cross_c_DIR}")
        target_link_libraries(${target_name}Private INTERFACE spirv-cross-cpp)
    endif ()

    # shaderc
    find_package(SPIRV-Tools REQUIRED)
    find_package(SPIRV-Tools-opt REQUIRED)
    find_package(glslang REQUIRED)
    find_package(shaderc REQUIRED)
    target_link_libraries(${target_name}Private INTERFACE shaderc::shaderc_shared)
    set(CMAKE_MAP_IMPORTED_CONFIG_DEBUG ${StateSave})
endfunction()
